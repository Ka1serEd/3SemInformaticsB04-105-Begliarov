#include <iostream>
#include <vector>
using namespace std;

void mergesort(vector<int> &a, size_t start, size_t endv) {
    if (endv - start<2) {
        return;
    }
    if (endv - start == 2) {
        if (a[start] > a[start+1])
            swap(a[start],a[start+1]);
        return;
    }
    mergesort(a, start, (start+endv)/2);
    mergesort(a, (start+endv)/2, endv);
    vector<int> b;
    size_t b1=start;
    size_t e1=(start+endv)/2;
    size_t b2=e1;
    while(b.size()<endv-start) {
        if(b1>= e1 || (b2<= endv && (a[b2]<=a[b1])))
        {
            b.push_back(a[b2]);
            ++b2;
        }
        else
        {
            b.push_back(a[b1]);
            ++b1;
        }
    }
    for (size_t i=start; i<endv; i++) {
        a[i]=b[i-start];
    }
}
int main()
{
    vector<int> v;
    for (int i=0; i<15;++i) {
        v.push_back(rand()%10);
    }
    for (auto i: v) {
        cout << i << " ";
    }
    cout << endl;
    mergesort(v,0, v.size());
    for (auto i: v) {
        cout << i << " ";
    }
}
